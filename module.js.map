{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///../node_modules/react-google-charts/dist/index.js","webpack:///./SankeyPanel.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as React from 'react';\nimport { useEffect, useState } from 'react';\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */ function useLoadScript(src, onLoad, onError) {\n    useEffect(()=>{\n        if (!document) {\n            return;\n        }\n        // Find script tag with same src in DOM.\n        const foundScript = document.querySelector('script[src=\"'.concat(src, '\"]'));\n        // Call onLoad if script marked as loaded.\n        if (foundScript === null || foundScript === void 0 ? void 0 : foundScript.dataset.loaded) {\n            onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n            return;\n        }\n        // Create or get existed tag.\n        const script = foundScript || document.createElement(\"script\");\n        // Set src if no script was found.\n        if (!foundScript) {\n            script.src = src;\n        }\n        // Mark script as loaded on load event.\n        const onLoadWithMarker = ()=>{\n            script.dataset.loaded = \"1\";\n            onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n        };\n        script.addEventListener(\"load\", onLoadWithMarker);\n        if (onError) {\n            script.addEventListener(\"error\", onError);\n        }\n        // Add to DOM if not yet added.\n        if (!foundScript) {\n            document.head.append(script);\n        }\n        return ()=>{\n            script.removeEventListener(\"load\", onLoadWithMarker);\n            if (onError) {\n                script.removeEventListener(\"error\", onError);\n            }\n        };\n    }, []);\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */ function useLoadGoogleCharts(param) {\n    let { chartVersion =\"current\" , chartPackages =[\n        \"corechart\",\n        \"controls\"\n    ] , chartLanguage =\"en\" , mapsApiKey  } = param;\n    const [googleCharts, setGoogleCharts] = useState(null);\n    const [failed, setFailed] = useState(false);\n    useLoadScript(\"https://www.gstatic.com/charts/loader.js\", ()=>{\n        // @ts-expect-error Getting object from global namespace.\n        const google = window === null || window === void 0 ? void 0 : window.google;\n        if (!google) {\n            return;\n        }\n        google.charts.load(chartVersion, {\n            packages: chartPackages,\n            language: chartLanguage,\n            mapsApiKey\n        });\n        google.charts.setOnLoadCallback(()=>{\n            setGoogleCharts(google);\n        });\n    }, ()=>{\n        setFailed(true);\n    });\n    return [\n        googleCharts,\n        failed\n    ];\n}\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */ function LoadGoogleCharts(param) {\n    let { onLoad , onError , ...params } = param;\n    const [googleCharts, failed] = useLoadGoogleCharts(params);\n    useEffect(()=>{\n        if (googleCharts && onLoad) {\n            onLoad(googleCharts);\n        }\n    }, [\n        googleCharts\n    ]);\n    useEffect(()=>{\n        if (failed && onError) {\n            onError();\n        }\n    }, [\n        failed\n    ]);\n    return null;\n}\n\nconst chartDefaultProps = {\n    // <DEPRECATED_PROPS>\n    legend_toggle: false,\n    // </DEPRECATED_PROPS>\n    options: {},\n    legendToggle: false,\n    getChartWrapper: ()=>{},\n    spreadSheetQueryParameters: {\n        headers: 1,\n        gid: 1\n    },\n    rootProps: {},\n    chartWrapperParams: {}\n};\n\nlet uniqueID = 0;\nconst generateUniqueID = ()=>{\n    uniqueID += 1;\n    return \"reactgooglegraph-\".concat(uniqueID);\n};\n\nconst DEFAULT_CHART_COLORS = [\n    \"#3366CC\",\n    \"#DC3912\",\n    \"#FF9900\",\n    \"#109618\",\n    \"#990099\",\n    \"#3B3EAC\",\n    \"#0099C6\",\n    \"#DD4477\",\n    \"#66AA00\",\n    \"#B82E2E\",\n    \"#316395\",\n    \"#994499\",\n    \"#22AA99\",\n    \"#AAAA11\",\n    \"#6633CC\",\n    \"#E67300\",\n    \"#8B0707\",\n    \"#329262\",\n    \"#5574A6\",\n    \"#3B3EAC\"\n];\n\nconst loadDataTableFromSpreadSheet = async function(googleViz, spreadSheetUrl) {\n    let urlParams = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    return new Promise((resolve, reject)=>{\n        const headers = \"\".concat(urlParams.headers ? \"headers=\".concat(urlParams.headers) : \"headers=0\");\n        const queryString = \"\".concat(urlParams.query ? \"&tq=\".concat(encodeURIComponent(urlParams.query)) : \"\");\n        const gid = \"\".concat(urlParams.gid ? \"&gid=\".concat(urlParams.gid) : \"\");\n        const sheet = \"\".concat(urlParams.sheet ? \"&sheet=\".concat(urlParams.sheet) : \"\");\n        const access_token = \"\".concat(urlParams.access_token ? \"&access_token=\".concat(urlParams.access_token) : \"\");\n        const urlQueryString = \"\".concat(headers).concat(gid).concat(sheet).concat(queryString).concat(access_token);\n        const urlToSpreadSheet = \"\".concat(spreadSheetUrl, \"/gviz/tq?\").concat(urlQueryString); //&tq=${queryString}`;\n        const query = new googleViz.visualization.Query(urlToSpreadSheet);\n        query.send((response)=>{\n            if (response.isError()) {\n                reject(\"Error in query:  \".concat(response.getMessage(), \" \").concat(response.getDetailedMessage()));\n            } else {\n                resolve(response.getDataTable());\n            }\n        });\n    });\n};\n\nconst { Provider , Consumer  } = /*#__PURE__*/ React.createContext(chartDefaultProps);\nconst ContextProvider = (param)=>{\n    let { children , value  } = param;\n    return /*#__PURE__*/ React.createElement(Provider, {\n        value: value\n    }, children);\n};\nconst ContextConsumer = (param)=>{\n    let { render  } = param;\n    return /*#__PURE__*/ React.createElement(Consumer, null, (context)=>{\n        return render(context);\n    });\n};\n\nconst GRAY_COLOR = \"#CCCCCC\";\nclass GoogleChartDataTableInner extends React.Component {\n    componentDidMount() {\n        this.draw(this.props);\n        window.addEventListener(\"resize\", this.onResize);\n        if (this.props.legend_toggle || this.props.legendToggle) {\n            this.listenToLegendToggle();\n        }\n    }\n    componentWillUnmount() {\n        const { google , googleChartWrapper  } = this.props;\n        window.removeEventListener(\"resize\", this.onResize);\n        google.visualization.events.removeAllListeners(googleChartWrapper);\n        if (googleChartWrapper.getChartType() === \"Timeline\") {\n            googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n        }\n    }\n    componentDidUpdate() {\n        this.draw(this.props);\n    }\n    render() {\n        return null;\n    }\n    constructor(...args){\n        super(...args);\n        this.state = {\n            hiddenColumns: []\n        };\n        this.listenToLegendToggle = ()=>{\n            const { google , googleChartWrapper  } = this.props;\n            google.visualization.events.addListener(googleChartWrapper, \"select\", ()=>{\n                const chart = googleChartWrapper.getChart();\n                const selection = chart.getSelection();\n                const dataTable = googleChartWrapper.getDataTable();\n                if (selection.length === 0 || // We want to listen to when a whole row is selected. This is the case only when row === null\n                selection[0].row || !dataTable) {\n                    return;\n                }\n                const columnIndex = selection[0].column;\n                const columnID = this.getColumnID(dataTable, columnIndex);\n                if (this.state.hiddenColumns.includes(columnID)) {\n                    this.setState((state)=>({\n                            ...state,\n                            hiddenColumns: [\n                                ...state.hiddenColumns.filter((colID)=>colID !== columnID), \n                            ]\n                        }));\n                } else {\n                    this.setState((state)=>({\n                            ...state,\n                            hiddenColumns: [\n                                ...state.hiddenColumns,\n                                columnID\n                            ]\n                        }));\n                }\n            });\n        };\n        this.applyFormatters = (dataTable, formatters)=>{\n            const { google  } = this.props;\n            for (let formatter of formatters){\n                switch(formatter.type){\n                    case \"ArrowFormat\":\n                        {\n                            const vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n                            vizFormatter.format(dataTable, formatter.column);\n                            break;\n                        }\n                    case \"BarFormat\":\n                        {\n                            const vizFormatter = new google.visualization.BarFormat(formatter.options);\n                            vizFormatter.format(dataTable, formatter.column);\n                            break;\n                        }\n                    case \"ColorFormat\":\n                        {\n                            const vizFormatter = new google.visualization.ColorFormat(formatter.options);\n                            const { ranges  } = formatter;\n                            for (let range of ranges){\n                                vizFormatter.addRange(...range);\n                            }\n                            vizFormatter.format(dataTable, formatter.column);\n                            break;\n                        }\n                    case \"DateFormat\":\n                        {\n                            const vizFormatter = new google.visualization.DateFormat(formatter.options);\n                            vizFormatter.format(dataTable, formatter.column);\n                            break;\n                        }\n                    case \"NumberFormat\":\n                        {\n                            const vizFormatter = new google.visualization.NumberFormat(formatter.options);\n                            vizFormatter.format(dataTable, formatter.column);\n                            break;\n                        }\n                    case \"PatternFormat\":\n                        {\n                            const vizFormatter = new google.visualization.PatternFormat(formatter.options);\n                            vizFormatter.format(dataTable, formatter.column);\n                            break;\n                        }\n                }\n            }\n        };\n        this.getColumnID = (dataTable, columnIndex)=>{\n            return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n        };\n        this.draw = async (param)=>{\n            let { data , diffdata , rows , columns , options , legend_toggle , legendToggle , chartType , formatters , spreadSheetUrl , spreadSheetQueryParameters  } = param;\n            const { google , googleChartWrapper  } = this.props;\n            let dataTable;\n            let chartDiff = null;\n            if (diffdata) {\n                const oldData = google.visualization.arrayToDataTable(diffdata.old);\n                const newData = google.visualization.arrayToDataTable(diffdata.new);\n                chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n            }\n            if (data !== null) {\n                if (Array.isArray(data)) {\n                    dataTable = google.visualization.arrayToDataTable(data);\n                } else {\n                    dataTable = new google.visualization.DataTable(data);\n                }\n            } else if (rows && columns) {\n                dataTable = google.visualization.arrayToDataTable([\n                    columns,\n                    ...rows\n                ]);\n            } else if (spreadSheetUrl) {\n                dataTable = await loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n            } else {\n                dataTable = google.visualization.arrayToDataTable([]);\n            }\n            const columnCount = dataTable.getNumberOfColumns();\n            for(let i = 0; i < columnCount; i += 1){\n                const columnID = this.getColumnID(dataTable, i);\n                if (this.state.hiddenColumns.includes(columnID)) {\n                    const previousColumnLabel = dataTable.getColumnLabel(i);\n                    const previousColumnID = dataTable.getColumnId(i);\n                    const previousColumnType = dataTable.getColumnType(i);\n                    dataTable.removeColumn(i);\n                    dataTable.addColumn({\n                        label: previousColumnLabel,\n                        id: previousColumnID,\n                        type: previousColumnType\n                    });\n                }\n            }\n            const chart = googleChartWrapper.getChart();\n            if (googleChartWrapper.getChartType() === \"Timeline\") {\n                chart && chart.clearChart();\n            }\n            googleChartWrapper.setChartType(chartType);\n            googleChartWrapper.setOptions(options || {});\n            googleChartWrapper.setDataTable(dataTable);\n            googleChartWrapper.draw();\n            if (this.props.googleChartDashboard !== null) {\n                this.props.googleChartDashboard.draw(dataTable);\n            }\n            if (chartDiff) {\n                googleChartWrapper.setDataTable(chartDiff);\n                googleChartWrapper.draw();\n            }\n            if (formatters) {\n                this.applyFormatters(dataTable, formatters);\n                googleChartWrapper.setDataTable(dataTable);\n                googleChartWrapper.draw();\n            }\n            if (legendToggle === true || legend_toggle === true) {\n                this.grayOutHiddenColumns({\n                    options\n                });\n            }\n            return;\n        };\n        this.grayOutHiddenColumns = (param)=>{\n            let { options  } = param;\n            const { googleChartWrapper  } = this.props;\n            const dataTable = googleChartWrapper.getDataTable();\n            if (!dataTable) return;\n            const columnCount = dataTable.getNumberOfColumns();\n            const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n            if (hasAHiddenColumn === false) return;\n            const colors = Array.from({\n                length: columnCount - 1\n            }).map((dontcare, i)=>{\n                const columnID = this.getColumnID(dataTable, i + 1);\n                if (this.state.hiddenColumns.includes(columnID)) {\n                    return GRAY_COLOR;\n                } else if (options && options.colors) {\n                    return options.colors[i];\n                } else {\n                    return DEFAULT_CHART_COLORS[i];\n                }\n            });\n            googleChartWrapper.setOptions({\n                ...options,\n                colors\n            });\n            googleChartWrapper.draw();\n        };\n        this.onResize = ()=>{\n            const { googleChartWrapper  } = this.props;\n            googleChartWrapper.draw();\n        };\n    }\n}\nclass GoogleChartDataTable extends React.Component {\n    componentDidMount() {}\n    componentWillUnmount() {}\n    shouldComponentUpdate() {\n        return false;\n    }\n    render() {\n        const { google , googleChartWrapper , googleChartDashboard  } = this.props;\n        return /*#__PURE__*/ React.createElement(ContextConsumer, {\n            render: (props)=>{\n                return /*#__PURE__*/ React.createElement(GoogleChartDataTableInner, Object.assign({}, props, {\n                    google: google,\n                    googleChartWrapper: googleChartWrapper,\n                    googleChartDashboard: googleChartDashboard\n                }));\n            }\n        });\n    }\n}\n\nclass GoogleChartEvents extends React.Component {\n    shouldComponentUpdate() {\n        return false;\n    }\n    listenToEvents(param) {\n        let { chartEvents , google , googleChartWrapper  } = param;\n        if (!chartEvents) {\n            return;\n        }\n        google.visualization.events.removeAllListeners(googleChartWrapper);\n        for (let event of chartEvents){\n            var _this = this;\n            const { eventName , callback  } = event;\n            google.visualization.events.addListener(googleChartWrapper, eventName, function() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                callback({\n                    chartWrapper: googleChartWrapper,\n                    props: _this.props,\n                    google: google,\n                    eventArgs: args\n                });\n            });\n        }\n    }\n    componentDidMount() {\n        var ref;\n        const { google , googleChartWrapper  } = this.props;\n        this.listenToEvents({\n            chartEvents: ((ref = this.propsFromContext) === null || ref === void 0 ? void 0 : ref.chartEvents) || null,\n            google,\n            googleChartWrapper\n        });\n    }\n    render() {\n        this.props;\n        return /*#__PURE__*/ React.createElement(ContextConsumer, {\n            render: (propsFromContext)=>{\n                this.propsFromContext = propsFromContext;\n                return null;\n            }\n        });\n    }\n    constructor(props){\n        super(props);\n        this.propsFromContext = null;\n    }\n}\n\nlet controlCounter = 0;\nclass GoogleChart extends React.Component {\n    componentDidMount() {\n        const { options , google , chartType , chartWrapperParams , toolbarItems , getChartEditor , getChartWrapper ,  } = this.props;\n        const chartConfig = {\n            chartType,\n            options,\n            containerId: this.getGraphID(),\n            ...chartWrapperParams\n        };\n        const googleChartWrapper = new google.visualization.ChartWrapper(chartConfig);\n        googleChartWrapper.setOptions(options || {});\n        if (getChartWrapper) {\n            getChartWrapper(googleChartWrapper, google);\n        }\n        const googleChartDashboard = new google.visualization.Dashboard(this.dashboard_ref);\n        const googleChartControls = this.addControls(googleChartWrapper, googleChartDashboard);\n        if (toolbarItems) {\n            google.visualization.drawToolbar(this.toolbar_ref.current, toolbarItems);\n        }\n        let googleChartEditor = null;\n        if (getChartEditor) {\n            googleChartEditor = new google.visualization.ChartEditor();\n            getChartEditor({\n                chartEditor: googleChartEditor,\n                chartWrapper: googleChartWrapper,\n                google\n            });\n        }\n        this.setState({\n            googleChartEditor,\n            googleChartControls: googleChartControls,\n            googleChartDashboard: googleChartDashboard,\n            googleChartWrapper,\n            isReady: true\n        });\n    }\n    componentDidUpdate() {\n        if (!this.state.googleChartWrapper) return;\n        if (!this.state.googleChartDashboard) return;\n        if (!this.state.googleChartControls) return;\n        const { controls  } = this.props;\n        if (controls) {\n            for(let i = 0; i < controls.length; i += 1){\n                const { controlType , options , controlWrapperParams  } = controls[i];\n                if (controlWrapperParams && \"state\" in controlWrapperParams) {\n                    this.state.googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n                }\n                this.state.googleChartControls[i].control.setOptions(options);\n                this.state.googleChartControls[i].control.setControlType(controlType);\n            }\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.state.isReady !== nextState.isReady || nextProps.controls !== this.props.controls;\n    }\n    render() {\n        const { width , height , options , style  } = this.props;\n        const divStyle = {\n            height: height || options && options.height,\n            width: width || options && options.width,\n            ...style\n        };\n        if (this.props.render) {\n            return /*#__PURE__*/ React.createElement(\"div\", {\n                ref: this.dashboard_ref,\n                style: divStyle\n            }, /*#__PURE__*/ React.createElement(\"div\", {\n                ref: this.toolbar_ref,\n                id: \"toolbar\"\n            }), this.props.render({\n                renderChart: this.renderChart,\n                renderControl: this.renderControl,\n                renderToolbar: this.renderToolBar\n            }));\n        } else {\n            return /*#__PURE__*/ React.createElement(\"div\", {\n                ref: this.dashboard_ref,\n                style: divStyle\n            }, this.renderControl((param)=>{\n                let { controlProp  } = param;\n                return controlProp.controlPosition !== \"bottom\";\n            }), this.renderChart(), this.renderControl((param)=>{\n                let { controlProp  } = param;\n                return controlProp.controlPosition === \"bottom\";\n            }), this.renderToolBar());\n        }\n    }\n    constructor(...args1){\n        var _this1;\n        super(...args1), _this1 = this;\n        this.state = {\n            googleChartWrapper: null,\n            googleChartDashboard: null,\n            googleChartControls: null,\n            googleChartEditor: null,\n            isReady: false\n        };\n        this.graphID = null;\n        this.dashboard_ref = /*#__PURE__*/ React.createRef();\n        this.toolbar_ref = /*#__PURE__*/ React.createRef();\n        this.getGraphID = ()=>{\n            const { graphID , graph_id  } = this.props;\n            let instanceGraphID;\n            if (!graphID && !graph_id) {\n                if (!this.graphID) {\n                    instanceGraphID = generateUniqueID();\n                } else {\n                    instanceGraphID = this.graphID;\n                }\n            } else if (graphID && !graph_id) {\n                instanceGraphID = graphID;\n            } else if (graph_id && !graphID) {\n                instanceGraphID = graph_id;\n            } else {\n                instanceGraphID = graphID;\n            }\n            this.graphID = instanceGraphID;\n            return this.graphID;\n        };\n        this.getControlID = (id, index)=>{\n            controlCounter += 1;\n            let controlID;\n            if (typeof id === \"undefined\") {\n                controlID = \"googlechart-control-\".concat(index, \"-\").concat(controlCounter);\n            } else {\n                controlID = id;\n            }\n            return controlID;\n        };\n        this.addControls = (googleChartWrapper, googleChartDashboard)=>{\n            const { google , controls  } = this.props;\n            const googleChartControls = !controls ? null : controls.map((control, i)=>{\n                const { controlID: controlIDMaybe , controlType , options: controlOptions , controlWrapperParams ,  } = control;\n                const controlID = this.getControlID(controlIDMaybe, i);\n                return {\n                    controlProp: control,\n                    control: new google.visualization.ControlWrapper({\n                        containerId: controlID,\n                        controlType,\n                        options: controlOptions,\n                        ...controlWrapperParams\n                    })\n                };\n            });\n            if (!googleChartControls) {\n                return null;\n            }\n            googleChartDashboard.bind(googleChartControls.map((param)=>{\n                let { control  } = param;\n                return control;\n            }), googleChartWrapper);\n            for (let chartControl of googleChartControls){\n                const { control , controlProp  } = chartControl;\n                const { controlEvents =[]  } = controlProp;\n                for (let event of controlEvents){\n                    var _this = this;\n                    const { callback , eventName  } = event;\n                    google.visualization.events.removeListener(control, eventName, callback);\n                    google.visualization.events.addListener(control, eventName, function() {\n                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                            args[_key] = arguments[_key];\n                        }\n                        callback({\n                            chartWrapper: googleChartWrapper,\n                            controlWrapper: control,\n                            props: _this.props,\n                            google: google,\n                            eventArgs: args\n                        });\n                    });\n                }\n            }\n            return googleChartControls;\n        };\n        this.renderChart = ()=>{\n            const { width , height , options , style , className , rootProps , google  } = this.props;\n            const divStyle = {\n                height: height || options && options.height,\n                width: width || options && options.width,\n                ...style\n            };\n            return /*#__PURE__*/ React.createElement(\"div\", Object.assign({\n                id: this.getGraphID(),\n                style: divStyle,\n                className: className\n            }, rootProps), this.state.isReady && this.state.googleChartWrapper !== null ? /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(GoogleChartDataTable, {\n                googleChartWrapper: this.state.googleChartWrapper,\n                google: google,\n                googleChartDashboard: this.state.googleChartDashboard\n            }), /*#__PURE__*/ React.createElement(GoogleChartEvents, {\n                googleChartWrapper: this.state.googleChartWrapper,\n                google: google\n            })) : null);\n        };\n        this.renderControl = function() {\n            let filter = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (param)=>{\n                return true;\n            };\n            return _this1.state.isReady && _this1.state.googleChartControls !== null ? /*#__PURE__*/ React.createElement(React.Fragment, null, _this1.state.googleChartControls.filter((param)=>{\n                let { controlProp , control  } = param;\n                return filter({\n                    control,\n                    controlProp\n                });\n            }).map((param)=>{\n                let { control , controlProp  } = param;\n                return /*#__PURE__*/ React.createElement(\"div\", {\n                    key: control.getContainerId(),\n                    id: control.getContainerId()\n                });\n            })) : null;\n        };\n        this.renderToolBar = ()=>{\n            if (!this.props.toolbarItems) return null;\n            return /*#__PURE__*/ React.createElement(\"div\", {\n                ref: this.toolbar_ref\n            });\n        };\n    }\n}\n\nclass Chart$1 extends (React.Component) {\n    render() {\n        const { chartLanguage , chartPackages , chartVersion , mapsApiKey , loader , errorElement ,  } = this.props;\n        return /*#__PURE__*/ React.createElement(ContextProvider, {\n            value: this.props\n        }, this.state.loadingStatus === \"ready\" && this.state.google !== null ? /*#__PURE__*/ React.createElement(GoogleChart, Object.assign({}, this.props, {\n            google: this.state.google\n        })) : this.state.loadingStatus === \"errored\" && errorElement ? errorElement : loader, /*#__PURE__*/ React.createElement(LoadGoogleCharts, {\n            chartLanguage: chartLanguage,\n            chartPackages: chartPackages,\n            chartVersion: chartVersion,\n            mapsApiKey: mapsApiKey,\n            onLoad: this.onLoad,\n            onError: this.onError\n        }));\n    }\n    componentDidMount() {\n        this._isMounted = true;\n    }\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n    isFullyLoaded(google) {\n        const { controls , toolbarItems , getChartEditor  } = this.props;\n        return google && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n    }\n    constructor(...args){\n        super(...args);\n        this._isMounted = false;\n        this.state = {\n            loadingStatus: \"loading\",\n            google: null\n        };\n        this.onLoad = (google1)=>{\n            if (this.props.onLoad) {\n                this.props.onLoad(google1);\n            }\n            if (this.isFullyLoaded(google1)) {\n                this.onSuccess(google1);\n            } else {\n                // IE11: window.google is not fully set, we have to wait\n                const id = setInterval(()=>{\n                    const google = window.google;\n                    if (this._isMounted) {\n                        if (google && this.isFullyLoaded(google)) {\n                            clearInterval(id);\n                            this.onSuccess(google);\n                        }\n                    } else {\n                        clearInterval(id);\n                    }\n                }, 1000);\n            }\n        };\n        this.onSuccess = (google)=>{\n            this.setState({\n                loadingStatus: \"ready\",\n                google\n            });\n        };\n        this.onError = ()=>{\n            this.setState({\n                loadingStatus: \"errored\"\n            });\n        };\n    }\n}\nChart$1.defaultProps = chartDefaultProps;\n\nvar GoogleDataTableColumnRoleType;\n(function(GoogleDataTableColumnRoleType) {\n    GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n    GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n    GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n    GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n    GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n    GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n    GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n    GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n    GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\n\nvar Chart = Chart$1;\n\nexport { Chart$1 as Chart, GoogleDataTableColumnRoleType, Chart as default };\n//# sourceMappingURL=index.js.map\n","import React from 'react';\nimport { PanelProps } from '@grafana/data';\nimport { SankeyOptions } from 'types';\nimport Chart from 'react-google-charts';\n\ninterface Props extends PanelProps<SankeyOptions> {}\n\nexport const SankeyPanel: React.FC<Props> = ({ options, data, width, height }) => {\n  let result = [\n    ['From', 'To', 'Bytes'],\n    ['Source N/A', 'Destination N/A', 1],\n  ];\n  let sources = data.series\n    .map((series) => series.fields.find((field) => field.name.toLowerCase() === 'source'))\n    .map((field) => {\n      let record = field?.values as any;\n      if(Array.isArray(record)) {\n        return record\n      } else {\n        return record?.buffer;\n      }\n    })[0];\n  if (sources !== undefined) {\n    let destinations = data.series\n      .map((series) => series.fields.find((field) => field.name.toLowerCase() === 'destination'))\n      .map((field) => {\n        let record = field?.values as any;\n        if(Array.isArray(record)) {\n          return record\n        } else {\n          return record?.buffer;\n        }\n      })[0];\n    let destinationIPs = data.series\n      .map((series) => series.fields.find((field) => field.name.toLowerCase() === 'destinationip'))\n      .map((field) => {\n        let record = field?.values as any;\n        if(Array.isArray(record)) {\n          return record\n        } else {\n          return record?.buffer;\n        }\n      })[0];\n    let bytes = data.series\n      .map((series) => series.fields.find((field) => field.name.toLowerCase() === 'bytes'))\n      .map((field) => {\n        let record = field?.values as any;\n        if(Array.isArray(record)) {\n          return record\n        } else {\n          return record?.buffer;\n        }\n      })[0];\n    let n = sources.length;\n    for (let i = 0; i < n; i++) {\n      if (bytes[i] === 0) {\n        continue;\n      }\n      let record = [];\n      let source = sources[i];\n      let destination = destinations[i];\n      if (source === '') {\n        source = 'N/A';\n      }\n      if (destination === '') {\n        if (destinationIPs[i] === '') {\n          destination = 'N/A';\n        } else {\n          destination = destinationIPs[i];\n        }\n      } else {\n        // Google Chart will not render if cycle exists. Direct cycle: a->a\n        // (e.g. intra-Node traffic in node_to_node_flows dashboard); Indirect\n        // cycle: a->b, b->c, c->a. Add an extra space to all the destination\n        // names to avoid introducing cycles.\n        destination = destination + ' ';\n      }\n      record.push(source);\n      record.push(destination);\n      record.push(bytes[i]);\n      if (i === 0) {\n        result = [['From', 'To', 'Bytes']];\n      }\n      result.push(record);\n    }\n  }\n  return (\n    <div>\n      <Chart width={600} height={'600px'} chartType=\"Sankey\" loader={<div>Loading Chart</div>} data={result} />\n    </div>\n  );\n};\n","import { PanelPlugin } from '@grafana/data';\nimport { SankeyOptions } from './types';\nimport { SankeyPanel } from './SankeyPanel';\n\nexport const plugin = new PanelPlugin<SankeyOptions>(SankeyPanel).setPanelOptions((builder) => builder);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","LoadGoogleCharts","param","onLoad","onError","params","googleCharts","failed","chartVersion","chartPackages","chartLanguage","mapsApiKey","setGoogleCharts","useState","setFailed","src","google","window","charts","load","packages","language","setOnLoadCallback","useEffect","document","foundScript","querySelector","concat","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","head","append","removeEventListener","useLoadGoogleCharts","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","uniqueID","DEFAULT_CHART_COLORS","Provider","Consumer","ContextProvider","children","ContextConsumer","render","context","GoogleChartDataTableInner","componentDidMount","this","draw","props","onResize","listenToLegendToggle","componentWillUnmount","googleChartWrapper","visualization","events","removeAllListeners","getChartType","getChart","clearChart","componentDidUpdate","constructor","args","super","state","hiddenColumns","addListener","selection","getSelection","dataTable","getDataTable","length","row","columnIndex","column","columnID","getColumnID","includes","setState","filter","colID","applyFormatters","formatters","formatter","type","ArrowFormat","format","BarFormat","vizFormatter","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","async","data","diffdata","rows","columns","chartType","spreadSheetUrl","chartDiff","oldData","arrayToDataTable","old","newData","new","computeDiff","Array","isArray","DataTable","googleViz","urlParams","arguments","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","Query","send","response","isError","getMessage","getDetailedMessage","loadDataTableFromSpreadSheet","columnCount","getNumberOfColumns","i","previousColumnLabel","previousColumnID","previousColumnType","getColumnType","removeColumn","addColumn","label","id","chart","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","colors","from","map","dontcare","GoogleChartDataTable","shouldComponentUpdate","assign","GoogleChartEvents","listenToEvents","chartEvents","event","_this","eventName","callback","_len","_key","chartWrapper","eventArgs","ref","propsFromContext","controlCounter","GoogleChart","toolbarItems","getChartEditor","chartConfig","containerId","getGraphID","ChartWrapper","Dashboard","dashboard_ref","googleChartControls","addControls","drawToolbar","toolbar_ref","current","googleChartEditor","ChartEditor","chartEditor","isReady","controls","controlType","controlWrapperParams","control","setControlType","nextProps","nextState","width","height","style","divStyle","renderChart","renderControl","renderToolbar","renderToolBar","controlProp","controlPosition","args1","_this1","graphID","graph_id","instanceGraphID","getControlID","index","controlID","controlIDMaybe","controlOptions","ControlWrapper","bind","chartControl","controlEvents","removeListener","controlWrapper","className","getContainerId","Chart$1","loader","errorElement","loadingStatus","_isMounted","isFullyLoaded","google1","onSuccess","setInterval","clearInterval","GoogleDataTableColumnRoleType","defaultProps","Chart","plugin","PanelPlugin","result","sources","series","fields","find","field","name","toLowerCase","record","values","buffer","destinations","destinationIPs","bytes","source","destination","push","div","setPanelOptions","builder"],"sourceRoot":""}